name: Deploy to production

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push client Docker image
        uses: docker/build-push-action@v2
        with: 
          context: ./client
          file: ./client/Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/express-gallery-web:latest

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/express-gallery-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy Docker Compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: 'compose.prod.yml'
          target: '/home/ubuntu'
          port: 22

      - name: SSH to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: | 
            # Grant necessary permissions to interact with Docker daemon
            sudo usermod -a -G docker ${{ secrets.HOST_USERNAME }}
            # Restart docker service to apply changes immediately
            sudo systemctl restart docker

            # Create .env file
            printf "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}\nMONGODB_URI=${{ SECRETS.MONGODB_URI }}" > /home/ubuntu/.env

            #  Stop exisitng containers
            docker stop express-gallery-web-ctn express-gallery-api-ctn
            docker rm express-gallery-web-ctn express-gallery-api-ctn
            
            # Pull images and start containers
            docker pull ${{ secrets.DOCKER_USERNAME }}/express-gallery-web:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/express-gallery-api:latest
            docker compose -f /home/ubuntu/compose.prod.yml up -d

            # Remove old images
            docker image prune --force